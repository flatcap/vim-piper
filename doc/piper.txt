*piper.txt*  Pass text through command-line filters

Author:  Richard Russon (flatcap) <rich@flatcap.org>
License: GPLv3 <http://fsf.org/>

This plugin is only available if 'compatible' is not set.

INTRODUCTION                                    *piper*

Save time by creating mappings for common filtering commands.
e.g. sort, uniq, nl.

COMMANDS                                        *piper-commands*

There are fourteen commands by default:

  Mnemonic  Command          Description ~
  a         ansifilter       (A)nsifilter                       
  c         column -t        (C)olumn                           
  d         uniq -d          show only (D)uplicate lines        
  e         uniq -c          (E)numerate (count) the duplicates 
  f         clang-format     (F)ormat source code               
  k         sort -t: -k1,1   Sort file by (K)ey                 
  l         nl -nrz -w4 -ba  (L)ine numbers                     
  n         sort -n          (N)umeric sort                     
  r         rev              (R)everse each                     
  s         sort -f          (S)ort lines (fold case)           
  t         tac              (T)ac (reverse the file)           
  u         uniq             (U)nique (remove duplicate lines)  
  x         shuf             mi(X) up lines                     
  z         cat -s           squee(Z)e blank lines              

MAPPINGS                                        *piper-mappings*

First, it's a good idea to create a mapping to show the mappings.
This will list all the shortcuts and the commands they call:

  nmap <silent> <F6> <Plug>PiperShowMappings

Alternatively, you can

  :call PiperShowMappings()

Each command has three mappings.
Each mapping begins with cp (remember this as Change using a Pipe), followed
by a letter from the table above: |piper-commands|
For example, the mappings for the "rev" command are:

  Mapping       Description ~
  cpr           Filter region defined by vim {motion} commands
  cprr          Filter the current line
  cpR           Filter the entire file (note the capital letter)

                                                            *cpa*
cpa{motion}     Run command "ansifilter" on the {motion}
                Effect: ANSI sequences are stripped out

                                                            *cpaa*
cpaa            Run command "ansifilter" on the current line
                Effect: ANSI sequences are stripped out

                                                            *cpA*
cpA             Run command "ansifilter" on the entire file
                Effect: ANSI sequences are stripped out

                                                            *cpc*
cpc{motion}     Run command "column -t" on the {motion}
                Effect: Data are put into columns

                                                            *cpcc*
cpcc            Run command "column -t" on the current line
                Effect: Data are put into columns

                                                            *cpC*
cpC             Run command "column -t" on the entire file
                Effect: Data are put into columns

                                                            *cpd*
cpd{motion}     Run command "uniq -d" on the {motion}
                Effect: Only duplicate lines are left

                                                            *cpdd*
cpdd            Run command "uniq -d" on the current line
                Effect: Only duplicate lines are left

                                                            *cpD*
cpD             Run command "uniq -d" on the entire file
                Effect: Only duplicate lines are left

                                                            *cpe*
cpe{motion}     Run command "uniq -c" on the {motion}
                Effect: Duplicate lines are counted

                                                            *cpee*
cpee            Run command "uniq -c" on the current line
                Effect: Duplicate lines are counted

                                                            *cpE*
cpE             Run command "uniq -c" on the entire file
                Effect: Duplicate lines are counted

                                                            *cpf*
cpf{motion}     Run command "clang-format" on the {motion}
                Effect: Source lines are tidied

                                                            *cpff*
cpff            Run command "clang-format" on the current line
                Effect: Source lines are tidied

                                                            *cpF*
cpF             Run command "clang-format" on the entire file
                Effect: Source lines are tidied

                                                            *cpk*

cpk{motion}     Run command "sort -t: -k1,1 -k2,2n -k3,3n" on the {motion}
                Effect: Lines are sorted by key

                                                            *cpkk*
cpkk            Run command "sort -t: -k1,1 -k2,2n -k3,3n" on the current line
                Effect: Lines are sorted by key

                                                            *cpK*
cpK             Run command "sort -t: -k1,1 -k2,2n -k3,3n" on the entire file
                Effect: Lines are sorted by key

                                                            *cpl*
cpl{motion}     Run command "nl -nrz -w4 -ba" on the {motion}
                Effect: Lines are numbered

                                                            *cpll*
cpll            Run command "nl -nrz -w4 -ba" on the current line
                Effect: Lines are numbered

                                                            *cpL*
cpL             Run command "nl -nrz -w4 -ba" on the entire file
                Effect: Lines are numbered

                                                            *cpn*
cpn{motion}     Run command "sort -n" on the {motion}
                Effect: Lines are sorted numerically

                                                            *cpnn*
cpnn            Run command "sort -n" on the current line
                Effect: Lines are sorted numerically

                                                            *cpN*
cpN             Run command "sort -n" on the entire file
                Effect: Lines are sorted numerically

                                                            *cpr*
cpr{motion}     Run command "rev" on the {motion}
                Effect: Each line is written backwards

                                                            *cprr*
cprr            Run command "rev" on the current line
                Effect: Each line is written backwards

                                                            *cpR*
cpR             Run command "rev" on the entire file
                Effect: Each line is written backwards

                                                            *cps*
cps{motion}     Run command "sort -f" on the {motion}
                Effect: Lines are sorted (ignoring case)

                                                            *cpss*
cpss            Run command "sort -f" on the current line
                Effect: Lines are sorted (ignoring case)

                                                            *cpS*
cpS             Run command "sort -f" on the entire file
                Effect: Lines are sorted (ignoring case)

                                                            *cpt*
cpt{motion}     Run command "tac" on the {motion}
                Effect: Lines are written in reverse order

                                                            *cptt*
cptt            Run command "tac" on the current line
                Effect: Lines are written in reverse order

                                                            *cpT*
cpT             Run command "tac" on the entire file
                Effect: Lines are written in reverse order

                                                            *cpu*
cpu{motion}     Run command "uniq" on the {motion}
                Effect: Duplicate lines are removed

                                                            *cpuu*
cpuu            Run command "uniq" on the current line
                Effect: Duplicate lines are removed

                                                            *cpU*
cpU             Run command "uniq" on the entire file
                Effect: Duplicate lines are removed

                                                            *cpx*
cpx{motion}     Run command "shuf" on the {motion}
                Effect: Lines are written in a random order

                                                            *cpxx*
cpxx            Run command "shuf" on the current line
                Effect: Lines are written in a random order

                                                            *cpX*
cpX             Run command "shuf" on the entire file
                Effect: Lines are written in a random order

                                                            *cpz*
cpz{motion}     Run command "cat -s" on the {motion}
                Effect: Duplicate blank lines are removed

                                                            *cpzz*
cpzz            Run command "cat -s" on the current line
                Effect: Duplicate blank lines are removed

                                                            *cpZ*
cpZ             Run command "cat -s" on the entire file
                Effect: Duplicate blank lines are removed

CONFIGURATION                                   *piper-configuration*

The pipes are initialised from a vim dictionary.  Here's the default:

  let g:piper_command_list = {
      \ 'a': 'LANG=C ansifilter',
      \ 'c': 'LANG=C column --table --output-separator " "',
      \ 'd': 'LANG=C uniq --repeated',
      \ 'e': 'LANG=C uniq --count',
      \ 'f': 'LANG=C clang-format -assume-filename=%',
      \ 'k': 'LANG=C sort --field-separator=: --key=1,1 --key=2,2n --key=3,3n',
      \ 'l': 'LANG=C nl --number-format=rz --number-width=4',
      \ 'n': 'LANG=C sort --numeric-sort',
      \ 'r': 'LANG=C rev',
      \ 's': 'LANG=C sort --ignore-case',
      \ 't': 'LANG=C tac',
      \ 'u': 'LANG=C uniq',
      \ 'x': 'LANG=C shuf',
      \ 'z': 'LANG=C cat --squeeze-blank',
  \ }

To add your own command, or change the parameters for an existing command,
copy the script, above, into your .vimrc

EXAMPLES                                                *piper-examples*

  Type This     Result ~
  cpsip         Current paragraph is sorted
  cpx9j         Ten lines are randomised
  cpL           Add lines numbers to the entire file

ABOUT                                                   *piper-about*

Grab the latest version or report a bug on GitHub:

http://github.com/flatcap/vim-piper

 vim:tw=78:ts=2:sw=2:et:ft=help:norl:
